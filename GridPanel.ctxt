#BlueJ class context
comment0.params=map\ res
comment0.target=GridPanel(DisplayMap,\ java.util.ResourceBundle)
comment0.text=\r\n\ Construct\ a\ new\ GridPanel\ object\ with\ no\ grid.\ The\ view\ will\ be\r\n\ empty.\r\n
comment1.params=g
comment1.target=void\ paintComponent(java.awt.Graphics)
comment1.text=\r\n\ Paint\ this\ component.\r\n\ @param\ g\ the\ Graphics\ object\ to\ use\ to\ render\ this\ component\r\n
comment10.params=
comment10.target=int\ extraHeight()
comment11.params=
comment11.target=java.awt.Dimension\ getPreferredSize()
comment11.text=\r\n\ Returns\ the\ desired\ size\ of\ the\ display,\ for\ use\ by\ layout\ manager.\r\n\ @return\ preferred\ size\r\n
comment12.params=
comment12.target=java.awt.Dimension\ getMinimumSize()
comment12.text=\r\n\ Returns\ the\ minimum\ size\ of\ the\ display,\ for\ use\ by\ layout\ manager.\r\n\ @return\ minimum\ size\r\n
comment13.params=
comment13.target=void\ zoomIn()
comment13.text=\r\n\ Zooms\ in\ the\ display\ by\ doubling\ the\ current\ cell\ size.\r\n
comment14.params=
comment14.target=void\ zoomOut()
comment14.text=\r\n\ Zooms\ out\ the\ display\ by\ halving\ the\ current\ cell\ size.\r\n
comment15.params=loc
comment15.target=void\ recenter(Location)
comment15.text=\r\n\ Pans\ the\ display\ back\ to\ the\ origin,\ so\ that\ 0,\ 0\ is\ at\ the\ the\ upper\r\n\ left\ of\ the\ visible\ viewport.\r\n
comment16.params=p
comment16.target=Location\ locationForPoint(java.awt.Point)
comment16.text=\r\n\ Given\ a\ Point\ determine\ which\ grid\ location\ (if\ any)\ is\ under\ the\r\n\ mouse.\ This\ method\ is\ used\ by\ the\ GUI\ when\ creating\ Fish\ by\ clicking\ on\r\n\ cells\ in\ the\ display.\r\n\ @param\ p\ the\ Point\ in\ question\ (in\ display's\ coordinate\ system)\r\n\ @return\ the\ Location\ beneath\ the\ event\ (which\ may\ not\ be\ a\r\n\ valid\ location\ in\ the\ grid)\r\n
comment17.params=loc
comment17.target=java.awt.Point\ pointForLocation(Location)
comment18.params=xCoord
comment18.target=int\ xCoordToCol(int)
comment19.params=yCoord
comment19.target=int\ yCoordToRow(int)
comment2.params=g2\ xleft\ ytop\ obj
comment2.target=void\ drawOccupant(java.awt.Graphics2D,\ int,\ int,\ java.lang.Object)
comment2.text=\r\n\ Draw\ one\ occupant\ object.\ First\ verify\ that\ the\ object\ is\ actually\r\n\ visible\ before\ any\ drawing,\ set\ up\ the\ clip\ appropriately\ and\ use\ the\r\n\ DisplayMap\ to\ determine\ which\ object\ to\ call\ upon\ to\ render\ this\r\n\ particular\ Locatable.\ Note\ that\ we\ save\ and\ restore\ the\ graphics\r\n\ transform\ to\ restore\ back\ to\ normalcy\ no\ matter\ what\ the\ renderer\ did\ to\r\n\ to\ the\ coordinate\ system.\r\n\ @param\ g2\ the\ Graphics2D\ object\ to\ use\ to\ render\r\n\ @param\ xleft\ the\ leftmost\ pixel\ of\ the\ rectangle\r\n\ @param\ ytop\ the\ topmost\ pixel\ of\ the\ rectangle\r\n\ @param\ obj\ the\ Locatable\ object\ to\ draw\r\n
comment20.params=col
comment20.target=int\ colToXCoord(int)
comment21.params=row
comment21.target=int\ rowToYCoord(int)
comment22.params=evt
comment22.target=java.lang.String\ getToolTipText(java.awt.event.MouseEvent)
comment22.text=\r\n\ Given\ a\ MouseEvent,\ determine\ what\ text\ to\ place\ in\ the\ floating\ tool\ tip\r\n\ when\ the\ the\ mouse\ hovers\ over\ this\ location.\ If\ the\ mouse\ is\ over\ a\r\n\ valid\ grid\ cell.\ we\ provide\ some\ information\ about\ the\ cell\ and\r\n\ its\ contents.\ This\ method\ is\ automatically\ called\ on\ mouse-moved\ events\r\n\ since\ we\ register\ for\ tool\ tips.\r\n\ @param\ evt\ the\ MouseEvent\ in\ question\r\n\ @return\ the\ tool\ tip\ string\ for\ this\ location\r\n
comment23.params=loc
comment23.target=java.lang.String\ getToolTipText(Location)
comment24.params=loc
comment24.target=void\ setCurrentLocation(Location)
comment24.text=\r\n\ Sets\ the\ current\ location.\r\n\ @param\ loc\ the\ new\ location\r\n
comment25.params=
comment25.target=Location\ getCurrentLocation()
comment25.text=\r\n\ Gets\ the\ current\ location.\r\n\ @return\ the\ currently\ selected\ location\ (marked\ with\ a\ bold\ square)\r\n
comment26.params=dr\ dc
comment26.target=void\ moveLocation(int,\ int)
comment26.text=\r\n\ Moves\ the\ current\ location\ by\ a\ given\ amount.\r\n\ @param\ dr\ the\ number\ of\ rows\ by\ which\ to\ move\ the\ location\r\n\ @param\ dc\ the\ number\ of\ columns\ by\ which\ to\ move\ the\ location\r\n
comment27.params=tipText\ pt
comment27.target=void\ showTip(java.lang.String,\ java.awt.Point)
comment27.text=\r\n\ Show\ a\ tool\ tip.\r\n\ @param\ tipText\ the\ tool\ tip\ text\r\n\ @param\ pt\ the\ pixel\ position\ over\ which\ to\ show\ the\ tip\r\n
comment28.params=evt
comment28.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment29.params=minSize
comment29.target=void\ recalculateCellSize(int)
comment29.text=\r\n\ Calculate\ the\ cell\ size\ to\ use\ given\ the\ current\ viewable\ region\ and\ the\r\n\ the\ number\ of\ rows\ and\ columns\ in\ the\ grid.\ We\ use\ the\ largest\r\n\ cellSize\ that\ will\ fit\ in\ the\ viewable\ region,\ bounded\ to\ be\ at\ least\ the\r\n\ parameter\ minSize.\r\n
comment3.params=g2
comment3.target=void\ drawGridlines(java.awt.Graphics2D)
comment3.text=\r\n\ Draw\ the\ gridlines\ for\ the\ grid.\ We\ only\ draw\ the\ portion\ of\ the\r\n\ lines\ that\ intersect\ the\ current\ clipping\ bounds.\r\n\ @param\ g2\ the\ Graphics2\ object\ to\ use\ to\ render\r\n
comment30.params=
comment30.target=javax.swing.JViewport\ getEnclosingViewport()
comment31.params=visibleRect\ orientation\ direction
comment31.target=int\ getScrollableUnitIncrement(java.awt.Rectangle,\ int,\ int)
comment32.params=visibleRect\ orientation\ direction
comment32.target=int\ getScrollableBlockIncrement(java.awt.Rectangle,\ int,\ int)
comment33.params=
comment33.target=boolean\ getScrollableTracksViewportWidth()
comment34.params=
comment34.target=boolean\ getScrollableTracksViewportHeight()
comment35.params=
comment35.target=java.awt.Dimension\ getPreferredScrollableViewportSize()
comment36.params=hDelta\ vDelta
comment36.target=void\ panBy(int,\ int)
comment37.params=
comment37.target=boolean\ isPannableUnbounded()
comment38.params=
comment38.target=void\ showPanTip()
comment38.text=\r\n\ Shows\ a\ tool\ tip\ over\ the\ upper\ left\ corner\ of\ the\ viewport\ with\ the\r\n\ contents\ of\ the\ pannable\ view's\ pannable\ tip\ text\ (typically\ a\ string\r\n\ identifiying\ the\ corner\ point).\ Tip\ is\ removed\ after\ a\ short\ delay.\r\n
comment4.params=g2
comment4.target=void\ drawOccupants(java.awt.Graphics2D)
comment4.text=\r\n\ Draws\ the\ occupants\ of\ the\ grid.\r\n\ @param\ g2\ the\ graphics\ context\r\n
comment5.params=g2
comment5.target=void\ drawCurrentLocation(java.awt.Graphics2D)
comment5.text=\r\n\ Draws\ a\ square\ that\ marks\ the\ current\ location.\r\n\ @param\ g2\ the\ graphics\ context\r\n
comment6.params=g2
comment6.target=void\ drawWatermark(java.awt.Graphics2D)
comment6.text=\r\n\ Draws\ a\ watermark\ that\ shows\ the\ version\ number\ if\ it\ is\ <\ 1.0\r\n\ @param\ g2\ the\ graphics\ context\r\n
comment7.params=flag
comment7.target=void\ setToolTipsEnabled(boolean)
comment7.text=\r\n\ Enables/disables\ showing\ of\ tooltip\ giving\ information\ about\ the\r\n\ occupant\ beneath\ the\ mouse.\r\n\ @param\ flag\ true/false\ to\ enable/disable\ tool\ tips\r\n
comment8.params=gr
comment8.target=void\ setGrid(Grid)
comment8.text=\r\n\ Sets\ the\ grid\ being\ displayed.\ Reset\ the\ cellSize\ to\ be\ the\r\n\ largest\ that\ fits\ the\ entire\ grid\ in\ the\ current\ visible\ area\ (use\r\n\ default\ if\ grid\ is\ too\ large).\r\n\ @param\ gr\ the\ grid\ to\ display\r\n
comment9.params=
comment9.target=int\ extraWidth()
numComments=39
